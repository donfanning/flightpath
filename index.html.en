<!DOCTYPE html>
<html>
  <head>
    <title>SaveMySunnySky Flight Paths</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>
      var map;
      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 37.343111, lng: -122.042324},
          zoom: 11
        });
        infoWindow = new google.maps.InfoWindow;
                // Try HTML5 geolocation.
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            infoWindow.setPosition(pos);
            infoWindow.setContent('Your Location Found.'+pos.lat+','+pos.lng);
            //infoWindow.open(map);
            //map.setCenter(pos);
          }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }

 
          
      var customLabel = {
        restaurant: {
          label: 'R'
        },
        bar: {
          label: 'B'
        }
      };
          downloadUrl('https://localhost/~xguan/dots.php',
            function(data)  { 
              var xml = data.responseXML;
              var flights = xml.documentElement.getElementsByTagName('flight');
              Array.prototype.forEach.call(flights, 
                function(flightElem) {
                  var flightPlanCoordinates = [];   
                  var markers = 	flightElem.childNodes;
                  Array.prototype.forEach.call(markers, 
                    function(markerElem) {
                      var id = markerElem.getAttribute('id');
                      var flight = markerElem.getAttribute('flight');
                      var point = new google.maps.LatLng(
                      parseFloat(markerElem.getAttribute('lat')),
                      parseFloat(markerElem.getAttribute('lng')));
                      flightPlanCoordinates.push(point);
                    }  // func
                  ) ; 
                  var flightPath = new google.maps.Polyline({
                    path: flightPlanCoordinates,
                    geodesic: true,
                    strokeColor: '#FF0000',
                    strokeOpacity: 1.0,
                    strokeWeight: 1
                  });
                  flightPath.setMap(map);
               } // func flightElem
           ); // forEach flight 
        } // func data
       ); // download call
     } //unction initMap
     function useless() {
              var infowincontent = document.createElement('div');
              var strong = document.createElement('strong');
              strong.textContent = name
              infowincontent.appendChild(strong);
              infowincontent.appendChild(document.createElement('br'));

              var text = document.createElement('text');
              text.textContent = id + ': ' + flight;
              infowincontent.appendChild(text);
              var icon = customLabel[id] || {};
              var marker = new google.maps.Marker({
                map: map,
                position: point,
                label: icon.label
              });
              marker.addListener('click', function() {
                infoWindow.setContent(infowincontent);
                infoWindow.open(map, marker);
              }); //addListener

} 
      function downloadUrl(url, callback) {
        var request = new XMLHttpRequest;

        request.onreadystatechange = function() {
        if (request.readyState == 4 && request.status == 200) {
            request.onreadystatechange = doNothing;
            callback(request, request.status);
          }
        };

        request.open('GET', url, true);
        request.send(null);
      }
      function doNothing() {}

      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=  AIzaSyDFtc8Ix25xIykMtvbSMBFkxZnW0Z19Wdw&callback=initMap"
    async defer></script>
  </body>
</html>
